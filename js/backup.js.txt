
function main() {
	var canvas = document.getElementById("canvas")
	var gl = document.getElementById("canvas").getContext("webgl");
	main = new Main(gl, canvas);
}

class Main {

	constructor(gl, canvas){
		this.gl = gl;
		this.canvas = canvas;
		canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
		window.addEventListener('resize', this.onResize, false);
		this.shader = new Shader(gl, "js/shader/simple.vs", "js/shader/simple.frag");
		this.shader.compile();
		
		this.shader.attributeSetFloats("pos", 3, [
			-1, 0, 0,
			0, 1, 0,
			0, -1, 0,
			1, 0, 0,
		]);
		console.log(window.innerWidth)
		console.log(window.innerHeight)
		//this.tex = new Texture(gl, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([1, 255, 0, 255]))

		//this.color1 = new Texture(gl, 0, gl.RGBA, 4, 4, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)


		//this.id = gl.createTexture()

		this.blur_shader = new Shader(gl, "js/shader/blur.vs", "js/shader/blur.frag");
		this.blur_shader.compile()
		this.blur_shader.attributeSetFloats("position", 2, [
			-0.8, -0.8,
			0.8, -0.8, 
			0.8, 0.8,
			-0.8, 0.8
		]);
		this.blur_shader.attributeSetFloats("texCoords", 2, [
			0, 0,
			1, 0, 
			1, 1,
			0, 1,
		]);

		console.log( gl.getParameter(gl.MAX_TEXTURE_SIZE) )

		this.texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, this.texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1024, 1024, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
		gl.generateMipmap(gl.TEXTURE_2D);

		this.framebuffer = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
		gl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0 );

        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    	gl.clearColor(0.40, 0.94, 0.92, 1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.disable(gl.DEPTH_TEST);
        gl.viewport(0, 0, 1024, 1024);


    	gl.disable(gl.BLEND);
    	gl.bindFramebuffer(gl.FRAMEBUFFER, null);


    	this.blur_shader.use();
    	gl.clearColor(0.72, 0.2, 0.3, 1);
    	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    	gl.viewport(0, 0, canvas.width, canvas.height);
    	
    	gl.activeTexture(gl.TEXTURE0);
    	gl.uniform1i( gl.getUniformLocation(this.blur_shader.id, "uSampler"), 0);
    	gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);

	}

	onResize() {
	    canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        //this.draw();
	}
/*
	draw() {
        var gl = this.gl;
        this.fbo.bind();
        this.color1.bind();
        this.depth.bind();
		this.shader.use();
        gl.viewport(0, 0, window.innerWidth, window.innerHeight);
    	gl.clearColor(0.2, 0.2, 0.3, 1);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    	gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    	
    	this.color1.unbind()
    	this.depth.unbind()
    	this.fbo.unbind();
    	gl.viewport(0, 0, window.innerWidth, window.innerHeight);
    	gl.clearColor(0.2, 0.2, 0.3, 1);
    	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    	this.blur_shader.use();
    	
    	gl.activeTexture(gl.TEXTURE0);
    	gl.uniform1i( gl.getUniformLocation(this.blur_shader.id, "uSampler"), 0);
    	this.color1.bind();
    	console.log(this.color1.id);
    	gl.drawArrays(gl.TRIANGLE_FAN, 0, 3);
    	this.color1.unbind();
	}*//*
	draw() {
        var gl = this.gl;
        //this.fbo.bind();
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    	gl.clearColor(0.40, 0.94, 0.92, 1);
		gl.clear(gl.COLOR_BUFFER_BIT);
        gl.viewport(0, 0, 512, 512);
    	//this.fbo.unbind();
    	gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    	this.blur_shader.use();
    	gl.clearColor(0.72, 0.2, 0.3, 1);
    	gl.clear(gl.COLOR_BUFFER_BIT);
    	gl.viewport(0, 0, window.innerWidth, window.innerHeight);
    	
    	gl.activeTexture(gl.TEXTURE0);
    	gl.uniform1i( gl.getUniformLocation(this.blur_shader.id, "uSampler"), 0);
    	gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
	}*/


}